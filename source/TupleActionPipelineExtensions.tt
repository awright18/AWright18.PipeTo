<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;

namespace AWright18.Extensions
{
	public static class TupleActionPipeToExtensions
	{
		public static void PipeTo<T> (this Tuple<T> tuple, Action<T> action)
		{
			action(tuple.Item1);
		}

	<# 

		for(int i=2; i < 8; i++)
		{
			var tReturnValue = string.Format("T{0}",i);
		
			var tNumbers = Enumerable.Range(1,i);
		
			var typeListBuilder = new StringBuilder();
		
			var isFirstT = true; 

			var types = string.Empty;

			var parameters = string.Empty;

			var parameterNames = string.Empty;

			var tupleItems = string.Empty;

			foreach(var number in tNumbers)
			{
				if(number == 1)
				{
					typeListBuilder.Append("T1");
				}
				else
				{
					typeListBuilder.AppendFormat(",T{0}",number);
				}
			}

			types = typeListBuilder.ToString();
		
			typeListBuilder = new StringBuilder();

			foreach(var number in tNumbers)
			{
				if(number == 1 || number == tNumbers.Count())
				{
				
					continue;
				}
				else
				{
					typeListBuilder.AppendFormat(",T{0} val{0}",number);
				}
			}

			parameters = typeListBuilder.ToString();

		
			typeListBuilder = new StringBuilder();

			foreach(var number in tNumbers)
			{
				if(number == 1)
				{
					continue;
				}
				else
				{
					typeListBuilder.AppendFormat(", tuple.Item{0}",number);
				}
			}

			tupleItems = typeListBuilder.ToString();
	#>
	public static void PipeTo<<#=types#>> (this Tuple<<#= types #>> tuple, Action<<#=types#>> action)
		{
			action(tuple.Item1<#= tupleItems #>);
		}

	<#
		}
	#>
} 
}